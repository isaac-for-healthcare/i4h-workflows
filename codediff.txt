--------------------------------------------------------------------------------
filepath: @workflows/robotic_surgery/README.md
--------------------------------------------------------------------------------
diff --git a/workflows/robotic_surgery/README.md b/workflows/robotic_surgery/README.md
new file mode 100644
index 0000000..cf3d718
--- /dev/null
+++ b/workflows/robotic_surgery/README.md
@@ -0,0 +1,72 @@
+# Scripts for all robotic surgery simulations
+
+## System Requirements
+
+- Ubuntu 22.04
+- NVIDIA GPU with compute capability 8.6 and 32GB of memory
+    - GPUs without RT Cores (A100, H100) are not supported.
+- NVIDIA Driver Version >= 555
+- 50GB of disk space
+
+## Environment Setup
+
+The robotic surgery workflow is built on the following dependencies:
+- [IsaacSim 4.1.0.0](https://docs.isaacsim.omniverse.nvidia.com/4.1.0/installation/index.html
+- [IsaacLab 1.2.0](https://isaac-sim.github.io/IsaacLab/v1.2.0/source/setup/installation/index.html)
+
+
+### 1. Prepare Isaac Lab Repository and Create a Conda Environment
+
+Clone [Isaac Lab repository](https://github.com/isaac-sim/IsaacLab):
+
+```bash
+git clone https://github.com/isaac-sim/IsaacLab.git
+cd IsaacLab
+git checkout v1.2.0
+sed -i 's/rsl-rl/rsl-rl-lib/g' source/extensions/omni.isaac.lab_tasks/setup.py
+# define the IsaacLab_PATH environment variable
+export IsaacLab_PATH=`pwd`
+```
+
+Create a new conda environment via Isaac Lab script:
+
+```bash
+${IsaacLab_PATH}/isaaclab.sh --conda robotic_surgery
+# activate conda environment
+conda activate robotic_surgery
+```
+
+### 2. Install Isaac Sim and Isaac Lab
+
+```bash
+pip install isaacsim==4.1.0.0 isaacsim-extscache-physics==4.1.0.0 isaacsim-extscache-kit==4.1.0.0 isaacsim-extscache-kit-sdk==4.1.0.0 git+ssh://git@github.com/isaac-for-healthcare/i4h-asset-catalog.git --extra-index-url https://pypi.nvidia.com
+${IsaacLab_PATH}/isaaclab.sh --install
+```
+
+### 3. Install Robotic Surgery
+
+```bash
+# move to a directory outside of IsaacLab installation directory
+cd ..
+git clone https://github.com/isaac-for-healthcare/i4h-workflows.git
+cd i4h-workflows
+./workflows/robotic_surgery/scripts/simulation/robotic_surgery.sh
+export PYTHONPATH="$(pwd)/workflows/robotic_surgery/scripts"
+```
+
+### Download the I4H assets
+
+Use the following command will download the assets to the `~/.cache/i4h-assets/<sha256>` directory.
+Please refer to the [Asset Container Helper](https://github.com/isaac-for-healthcare/i4h-asset-catalog/blob/main/docs/catalog_helper.md) for more details.
+
+```sh
+i4h-asset-retrieve
+```
+
+## Run the scripts
+
+The robotic surgery workflow provides several example scripts demonstrating surgical robot simulations, state machine implementations, and reinforcement learning capabilities. These examples include dVRK and STAR robot arm control, suture needle manipulation, and peg block tasks.
+
+Navigate to these sub-directories and run the scripts.
+
+- [Simulation](./scripts/simulation)
--------------------------------------------------------------------------------
filepath: @workflows/robotic_surgery/scripts/simulation/README.md
--------------------------------------------------------------------------------
diff --git a/workflows/robotic_surgery/scripts/simulation/README.md b/workflows/robotic_surgery/scripts/simulation/README.md
index 154c8a4..6e0e264 100644
--- a/workflows/robotic_surgery/scripts/simulation/README.md
+++ b/workflows/robotic_surgery/scripts/simulation/README.md
@@ -8,51 +8,7 @@ Robotic Surgery is a physics-based surgical robot simulation framework with phot
 
 ## Setup
 
-Robotic Surgery is built upon NVIDIA [Isaac Sim 4.1.0](https://docs.isaacsim.omniverse.nvidia.com/4.1.0/index.html) and [Isaac Lab 1.2.0](https://github.com/isaac-sim/IsaacLab).
-
-For detailed instructions on how to install these dependencies, please refer to the [Isaac Sim installation guide](https://docs.isaacsim.omniverse.nvidia.com/4.1.0/installation/index.html) and [Isaac Lab installation guide](https://isaac-sim.github.io/IsaacLab/v1.2.0/source/setup/installation/index.html).
-
-We recommend using `conda` to create a new environment and install all the dependencies:
-
-### 1. Prepare Isaac Lab Repository and Create a Conda Environment
-
-Clone [Isaac Lab repository](https://github.com/isaac-sim/IsaacLab):
-
-```bash
-git clone https://github.com/isaac-sim/IsaacLab.git
-cd IsaacLab
-git checkout v1.2.0
-sed -i 's/rsl-rl/rsl-rl-lib/g' source/extensions/omni.isaac.lab_tasks/setup.py
-# define the IsaacLab_PATH environment variable
-export IsaacLab_PATH=`pwd`
-```
-
-Create a new conda environment via Isaac Lab script:
-
-```bash
-${IsaacLab_PATH}/isaaclab.sh --conda robotic_surgery
-# activate conda environment
-conda activate robotic_surgery
-```
-
-### 2. Install Isaac Sim and Isaac Lab
-
-```bash
-pip install isaacsim==4.1.0.0 isaacsim-extscache-physics==4.1.0.0 isaacsim-extscache-kit==4.1.0.0 isaacsim-extscache-kit-sdk==4.1.0.0 --extra-index-url https://pypi.nvidia.com
-${IsaacLab_PATH}/isaaclab.sh --install
-```
-
-### 3. Install Robotic Surgery
-
-```bash
-# move to a directory outside of IsaacLab installation directory
-cd ..
-git clone https://github.com/isaac-for-healthcare/i4h-workflows.git
-cd i4h-workflows
-./workflows/robotic_surgery/scripts/simulation/robotic_surgery.sh
-export PYTHONPATH="$(pwd)/workflows/robotic_surgery/scripts"
-```
-
+Please refer to the [README](../README.md) for instructions on how to install the dependencies.
 
 ## Robotic Surgery Tasks
 
--------------------------------------------------------------------------------
filepath: @README.md
--------------------------------------------------------------------------------
diff --git a/README.md b/README.md
index 7bd7573..2918d54 100644
--- a/README.md
+++ b/README.md
@@ -44,7 +44,7 @@ For everything you need to get started, including detailed tutorials and step-by
 
 - [Robotic ultrasound - simulation](./workflows/robotic_ultrasound/scripts/simulation/README.md)
 - [Robotic ultrasound - policy runner](./workflows/robotic_ultrasound/scripts/policy_runner/README.md)
-- <placeholder for "Robotic ultrasound - Holoscan programs">
+- [Robotic ultrasound - holoscan apps](./workflows/robotic_ultrasound/scripts/holoscan_apps/README.md)
 - [Robotic surgery - simulation](./workflows/robotic_surgery/scripts/simulation/README.md)
 - [Tutorials](./tutorials)
 
--------------------------------------------------------------------------------
filepath: @workflows/robotic_ultrasound/README.md
--------------------------------------------------------------------------------
diff --git a/workflows/robotic_ultrasound/README.md b/workflows/robotic_ultrasound/README.md
new file mode 100644
index 0000000..180ff8a
--- /dev/null
+++ b/workflows/robotic_ultrasound/README.md
@@ -0,0 +1,83 @@
+# Scripts for all the simulation and physical world logic
+
+## System Requirements
+
+- Ubuntu 22.04
+- NVIDIA GPU with compute capability 8.6 and 32GB of memory
+    - GPUs without RT Cores (A100, H100) are not supported.
+- NVIDIA Driver Version >= 555
+- 50GB of disk space
+
+## Environment Setup
+
+The robotic ultrasound workflow is built on the following dependencies:
+- [IsaacSim 4.2.0.2](https://docs.isaacsim.omniverse.nvidia.com/4.2.0/index.html)
+- [IsaacLab 1.4.1](https://isaac-sim.github.io/IsaacLab/v1.4.1/source/setup/installation/index.html)
+- [openpi](https://github.com/Physical-Intelligence/openpi) and [lerobot](https://github.com/huggingface/lerobot)
+- [Raytracing Ultrasound Simulator](https://github.com/isaac-for-healthcare/i4h-sensor-simulation/tree/main/ultrasound-raytracing)
+
+### Install NVIDIA Driver
+
+Install or upgrade to the latest NVIDIA driver from [NVIDIA website](https://www.nvidia.com/en-us/drivers/)
+
+**NOTE**: [Raytracing Ultrasound Simulator](https://github.com/isaac-for-healthcare/i4h-sensor-simulation/tree/main/ultrasound-raytracing) requires driver version >= 555.
+
+
+### Obtain license of RTI DDS
+
+RTI DDS is the common communication package for all the scripts, please refer to [DDS website](https://www.rti.com/products) for registration. You will need to obtain a license file for the RTI DDS and set the `RTI_LICENSE_FILE` environment variable to the path of the license file.
+
+
+### Install Dependencies
+
+Conda is suggested for virtual environment setup, install `Miniconda` from [Miniconda website](https://docs.anaconda.com/miniconda/install/#quick-command-line-install) and create a new virtual environment with Python 3.10.
+
+```sh
+# Create a new conda environment
+conda create -n robotic_ultrasound python=3.10 -y
+# Activate the environment
+conda activate robotic_ultrasound
+```
+
+To use the ultrasound-raytracing simulator, you can choose one of the following options:
+- (experimental) Download the pre-release version from [here](https://github.com/isaac-for-healthcare/i4h-sensor-simulation/releases/tag/ultrasound-raytracing) and extract the folder to `workflows/robotic_ultrasound/scripts/raysim`.
+
+- (recommended) Install and build it by following the instructions in [Raytracing Ultrasound Simulator](https://github.com/isaac-for-healthcare/i4h-sensor-simulation/tree/main/ultrasound-raytracing#installation).
+
+
+Install other dependencies by running:
+```bash
+cd <path-to-i4h-workflows>
+python tools/install_deps.py
+```
+
+### Download the I4H assets
+
+Use the following command will download the assets to the `~/.cache/i4h-assets/<sha256>` directory.
+Please refer to the [Asset Container Helper](https://github.com/isaac-for-healthcare/i4h-asset-catalog/blob/main/docs/catalog_helper.md) for more details.
+
+```sh
+i4h-asset-retrieve
+```
+
+### Set environment variables before running the scripts
+Make sure `PYTHONPATH`, `RTI_LICENSE_FILE` and `LD_PRELOAD` is set
+```sh
+export PYTHONPATH=`<path-to-i4h-workflows>/workflows/robotic_ultrasound/scripts`
+export RTI_LICENSE_FILE=<path-to-rti-license-file>
+export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6
+```
+
+## Run the scripts
+
+The robotic ultrasound workflow provides several example scripts demonstrating the ultrasound raytracing simulation, holoscan apps, policy model runner, training, and etc.
+
+Navigate to these sub-directories and run the scripts.
+
+- [Holoscan Apps](./scripts/holoscan_apps)
+- [Policy Runner](./scripts/policy_runner)
+- [Simulation](./scripts/simulation)
+- [Training](./scripts/training)
+- [Visualization Utilities](./scripts/utils)
+
+Please note that you may need to simultaneously run multiple scripts in different sub-directories to complete the entire workflow. For example, you need to have 4 different terminals running the visualization, policy runner, the sim_with_dds and ultrasound raytracing simulations.
--------------------------------------------------------------------------------
filepath: @workflows/robotic_ultrasound/scripts/policy_runner/README.md
--------------------------------------------------------------------------------
diff --git a/workflows/robotic_ultrasound/scripts/policy_runner/README.md b/workflows/robotic_ultrasound/scripts/policy_runner/README.md
index a8523c6..725f3ef 100644
--- a/workflows/robotic_ultrasound/scripts/policy_runner/README.md
+++ b/workflows/robotic_ultrasound/scripts/policy_runner/README.md
@@ -12,60 +12,8 @@ Please check the [I4H asset catalog](https://github.com/isaac-for-healthcare/i4h
 
 ### Install Dependencies
 
-Before installing dependencies, please activate the python virtual environment, referring to the [Setup Doc](../README.md).
+Follow the [Environment Setup](../README.md#environment-setup) instructions to setup the environment and dependencies.
 
-```sh
-conda activate robotic_ultrasound
-```
-
-#### Install with Script
-
-To install `openpi` in python 3.10 without `uv` environment and support `IsaacSim 4.2`, several workarounds are required. To simplify the process, a script [install_openpi_with_isaac_4.2.sh](../../../../tools/install_openpi_with_isaac_4.2.sh) is prepared in the folder `tools` under the root directory of the repository (i.e. `/path-to-i4h-workflows/i4h-workflows/tools/`). Please move to the corresponding folder and run the following command (then move back to the current folder):
-
-```sh
-bash install_openpi_with_isaac_4.2.sh
-```
-
-#### (Optional) Install Manually
-
-If you want to install dependencies manually, please follow below steps:
-
-- `git clone git@github.com:Physical-Intelligence/openpi.git`
-- Changes for `openpi/src/openpi/shared/download.py` (just temp workaround, will not need it after upgrading to IsaacSim 4.5):
-  ```py
-  -import boto3.s3.transfer as s3_transfer
-  +# import boto3.s3.transfer as s3_transfer
-
-  -import s3transfer.futures as s3_transfer_futures
-  +# import s3transfer.futures as s3_transfer_futures
-
-  -from types_boto3_s3.service_resource import ObjectSummary
-  +# from types_boto3_s3.service_resource import ObjectSummary
-
-  -) -> s3_transfer.TransferManager:
-
-  -date = datetime.datetime(year, month, day, tzinfo=datetime.UTC)
-  +date = datetime.datetime(year, month, day, tzinfo=datetime.timezone.utc)
-  ```
-- Change the python requirement in `pyproject.toml` to `>=3.10`.
-- Modify the type hints in `openpi/src/openpi/training/utils.py` to use Any instead of optax types:
-  ```py
-  -opt_state: optax.OptState
-  +opt_state: Any
-  ```
-- Add `openpi/src/openpi/train.py` and `openpi/src/openpi/compute_norm_stats.py` to `openpi/src/openpi/`:
-  ```sh
-  cp openpi/scripts/train.py openpi/src/openpi/train.py
-  cp openpi/scripts/compute_norm_stats.py openpi/src/openpi/compute_norm_stats.py
-  ```
-- Install `lerobot`, `openpi-client` and `openpi`:
-
-  ```sh
-  pip install git+https://github.com/huggingface/lerobot@6674e368249472c91382eb54bb8501c94c7f0c56
-  pip install -e packages/openpi-client/
-  pip install -e .
-  ```
-- Revert the commented out import statements in `openpi/src/openpi/shared/download.py`.
 
 ### Setup Python Path
 
--------------------------------------------------------------------------------
filepath: @workflows/robotic_ultrasound/scripts/README.md
--------------------------------------------------------------------------------
diff --git a/workflows/robotic_ultrasound/scripts/README.md b/workflows/robotic_ultrasound/scripts/README.md
deleted file mode 100644
index 04b615b..0000000
--- a/workflows/robotic_ultrasound/scripts/README.md
+++ /dev/null
@@ -1,22 +0,0 @@
-# Scripts for all the simulation and physical world logic
-
-## Setup
-1. [Miniconda](https://docs.anaconda.com/miniconda/install/#quick-command-line-install)
-is suggested for virtual environment setup, install `Miniconda`, then execute:
-```sh
-# Create a new conda environment
-conda create -n robotic_ultrasound python=3.10 -y
-# Activate the environment
-conda activate robotic_ultrasound
-```
-2. RTI DDS is the common communication package for all the scripts,
-please refer to [DDS website](https://www.rti.com/products) for registration.
-Install `RTI DDS`:
-```sh
-pip install rti.connext
-```
-3. Make sure `PYTHONPATH` and `RTI_LICENSE_FILE` is set
-```sh
-export PYTHONPATH=`/path-to-i4h-workflows/workflows/robotic_ultrasound/scripts`
-export RTI_LICENSE_FILE=<path-to-rti-license-file>
-```
--------------------------------------------------------------------------------
filepath: @workflows/robotic_ultrasound/scripts/simulation/README.md
--------------------------------------------------------------------------------
diff --git a/workflows/robotic_ultrasound/scripts/simulation/README.md b/workflows/robotic_ultrasound/scripts/simulation/README.md
index 70cdb67..8198ef1 100644
--- a/workflows/robotic_ultrasound/scripts/simulation/README.md
+++ b/workflows/robotic_ultrasound/scripts/simulation/README.md
@@ -1,65 +1,17 @@
 # IsaacLab simulation for robotic ultrasound
 
 ## Table of Contents
-- [Requirements](#requirements)
 - [Installation](#installation)
 - [Environments](#environments)
 - [Apps](#apps)
   - [PI Zero Policy Evaluation](#pi-zero-policy-evaluation)
   - [Policy Evaluation w/ DDS](#policy-evaluation-w-dds)
   - [Liver Scan State Machine](#liver-scan-state-machine)
-
-# Requirements
-
-Follow [instructions](https://isaac-sim.github.io/IsaacLab/main/source/setup/installation/pip_installation.html) to install IsaacLab. TLDR;
-
-First of all, create a python virtual environment, referring to the [Setup Doc](../README.md), then execute:
-```sh
-# Upgrade pip
-pip install --upgrade pip
-# Install IsaacSim
-pip install isaacsim==4.2.0.2 isaacsim-extscache-physics==4.2.0.2 isaacsim-extscache-kit==4.2.0.2 isaacsim-extscache-kit-sdk==4.2.0.2 --extra-index-url https://pypi.nvidia.com
-# Install Isaac Lab outside of the repo
-cd <some workspace>
-git clone git@github.com:isaac-sim/IsaacLab.git
-cd IsaacLab
-# Checkout v1.4.1
-git checkout v1.4.1
-# Patch (temporary workaround for Isaacsim 4.2 + IsaacLab 1.4.1)
-sed -i 's/rsl-rl/rsl-rl-lib/g' source/extensions/omni.isaac.lab_tasks/setup.py
-# Install dependencies
-sudo apt install cmake build-essential
-# Install Isaac Lab
-./isaaclab.sh --install
-# Test installation
-python source/standalone/tutorials/00_sim/create_empty.py
-```
-
-# Download the assets
-
-```sh
-git clone git@github.com:isaac-for-healthcare/i4h-asset-catalog.git
-cd i4h-asset-catalog
-pip install -e .
-
-i4h-asset-retrieve
-```
+  - [Ultrasound Raytracing Simulation](#ultrasound-raytracing-simulation)
 
 # Installation
 
-Follow the [Installation](#installation) instructions below to install the extension.
-
-From the root directory, run:
-
-```sh
-# Activate the environment
-conda activate robotic_ultrasound
-# Ensure toml is installed
-pip install toml
-# Install the environments
-cd <repo root>/workflows/robotic_ultrasound/scripts/simulation
-python -m pip install -e exts/robotic_us_ext
-```
+Follow the [Environment Setup](../README.md#environment-setup) instructions to setup the environment and dependencies.
 
 # Environments
 
--------------------------------------------------------------------------------
