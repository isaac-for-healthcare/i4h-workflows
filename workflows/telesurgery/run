#!/bin/bash
# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Error out if a command fails or a variable is not defined
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

set -eu
NAME=i4h-telesurgery
IMAGE_NAME=i4h-telesurgery:latest
WORKSPACE_DIR=/workspace/${NAME}

function build() {
    build_path=${SCRIPT_DIR}/build
    cmake -S . -B ${build_path}
    cmake --build ${build_path}
}

function enter() {
    build_image
    xhost +local:docker
    docker run -it --rm \
        --runtime=nvidia --gpus all \
        -e "ACCEPT_EULA=Y" \
        -e "PRIVACY_CONSENT=Y" \
        -e DISPLAY \
        -e XDG_RUNTIME_DIR \
        -e XDG_SESSION_TYPE \
        --network=host \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v ~/docker/isaac-sim/cache/kit:/isaac-sim/kit/cache:rw \
        -v ~/docker/isaac-sim/cache/ov:/root/.cache/ov:rw \
        -v ~/docker/isaac-sim/cache/pip:/root/.cache/pip:rw \
        -v ~/docker/isaac-sim/cache/glcache:/root/.cache/nvidia/GLCache:rw \
        -v ~/docker/isaac-sim/cache/computecache:/root/.nv/ComputeCache:rw \
        -v ~/docker/isaac-sim/logs:/root/.nvidia-omniverse/logs:rw \
        -v ~/docker/isaac-sim/data:/root/.local/share/ov/data:rw \
        -v ~/docker/isaac-sim/documents:/root/Documents:rw \
        # --device=/dev/input/js0 \
        --entrypoint "" \
        -v ${SCRIPT_DIR}:${WORKSPACE_DIR} -w ${WORKSPACE_DIR} ${IMAGE_NAME} bash
}

function build_image() {
    docker build -f ${SCRIPT_DIR}/deploy/Dockerfile -t ${IMAGE_NAME} --progress=plain .
}

function vscode() {
    if [ ! -d ~/rti_connext_dds-7.3.0 ]; then
        echo "RTI Connext DDS not found, please install it at ~/rti_connext_dds-7.3.0"
        exit 1
    fi

    # Allow the docker group to access X11.
    xhost +local:docker

    # build the Docker image if it doesn't exist
    build_image

    if command -v devcontainer &> /dev/null; then
        devcontainer open ${SCRIPT_DIR}
    else
        echo "devcontainer not found, please install it by pressing CTRL+SHIFT+P and selecting 'Dev Containers: Install devcontainer CLI'"
    fi
}

function surgeon() {
    set +u
    if [[ "$1" == "--rebuild" ]]; then
        build
        shift
    elif [ ! -f ${SCRIPT_DIR}/build/surgeon/surgeon ]; then
        build
    fi
    pushd ${SCRIPT_DIR}/build/surgeon
    ./surgeon
    popd
    set -u
}

function patient() {
    set +u
    if [[ "$1" == "--rebuild" ]]; then
        build
        shift
    elif [ ! -f ${SCRIPT_DIR}/build/patient/patient ]; then
        build
    fi

    set +u
    CURRENT_PYTHON_PATH=${PYTHONPATH:-}
    export PYTHONPATH=${SCRIPT_DIR}:${SCRIPT_DIR}/build/python/lib:${PYTHONPATH}
    pushd ${SCRIPT_DIR}/patient/simulation
    python main.py
    popd
    export PYTHONPATH=${CURRENT_PYTHON_PATH}
    set -u
}

function clean() {
    rm -rf ${SCRIPT_DIR}/build
}

function help() {
    echo "Usage: $0 COMMAND [-h|--help][build|build_image|vscode|surgeon|patient|enter|clean]"
    echo ""
    echo "Commands:"
    echo " -h, --help"
    echo "  display this help message"
    echo " build"
    echo "  build the project"
    echo " build_image"
    echo "  build the Docker image"
    echo " vscode"
    echo "  open the project in VSCode Dev Container"
    echo " surgeon [--rebuild]"
    echo "  run the surgeon application"
    echo " patient [--rebuild]"
    echo "  run the patient application"
    echo " enter"
    echo "  enter the Docker container"
    echo " clean"
    echo "  clear the build cache"
    exit 1
}

COMMAND=""

while (($#)); do
case $1 in
    -h|--help)
    help
    exit 1
    ;;
    build|build_image|vscode|surgeon|patient|enter|clean)
    COMMAND=$1
    shift
    break
    ;;
    *)
    echo "Unknown option '"$1"'"
    help
    ;;
esac
done

if [ -z "${COMMAND}" ]; then
    help
    exit 1
fi

${COMMAND} $@
