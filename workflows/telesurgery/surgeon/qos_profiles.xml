<!--
    SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
    SPDX-License-Identifier: Apache-2.0

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="https://community.rti.com/schema/current/rti_dds_qos_profiles.xsd">

    <!-- Transport library to provide optimizations for the domain participant -->
    <qos_library name="TelesurgeryLibrary">

        <!-- Optimized profile for shared memory and local network -->
        <qos_profile name="TelesurgeryApplication" base_name="BuiltinQosLib::Generic.Common">
            <domain_participant_qos>
                <participant_name>
                    <name>SurgeonParticipant</name>
                </participant_name>
                <!-- Optimizations for the the SHMEM and UDPv4 transports. -->
                <transport_builtin>
                    <!-- <mask>SHMEM | UDPv4</mask>
                    <shmem>
                        <message_size_max>5242880</message_size_max>
                        <received_message_count_max>10</received_message_count_max>
                        <receive_buffer_size>5242880</receive_buffer_size>
                    </shmem> -->
                    <mask>UDPv4</mask>
                    <udpv4>
                        <!-- This helps not to lose packets. Run set_socket_buffer_sizes.sh first. -->
                        <send_socket_buffer_size>5242880</send_socket_buffer_size>
                        <recv_socket_buffer_size>5242880</recv_socket_buffer_size>
                        <!-- <message_size_max>1400</message_size_max> -->
                        <!-- Specify allowed interfaces or addresses for communication -->
                        <!-- Optional: Specify unicast addresses for initial peers -->
                        <!-- <unicast_enabled>true</unicast_enabled> -->
                    </udpv4>
                </transport_builtin>
                <!-- <discovery>
                    <multicast_receive_addresses />
                    <initial_peers>
                        <element>udpv4://10.137.145.98</element>
                    </initial_peers>
                </discovery>
                <discovery_config>
                    <participant_liveliness_assert_period>
                        <sec>1</sec>
                        <nanosec>0</nanosec>
                    </participant_liveliness_assert_period>
                </discovery_config> -->
            </domain_participant_qos>

            <!-- Discovery-related optimizations -->
            <base_name>
                <element>BuiltinQosSnippetLib::Optimization.Discovery.Common</element>
                <element>BuiltinQosSnippetLib::Optimization.Discovery.Endpoint.Fast</element>
                <element>BuiltinQosSnippetLib::Optimization.ReliabilityProtocol.Common</element>
            </base_name>
        </qos_profile>


        <!-- Profile for the Command streaming components -->
        <qos_profile name="Command" base_name="BuiltinQosLib::Generic.StrictReliable.LowLatency">
            <datawriter_qos>
                <publication_name>
                    <name>InputCommandWriter</name>
                </publication_name>
            </datawriter_qos>
            <datareader_qos>
                <subscription_name>
                    <name>InputCommandReader</name>
                </subscription_name>
            </datareader_qos>
        </qos_profile>

        <!-- Profile for the Video streaming components -->
        <qos_profile name="Video" base_name="BuiltinQosLib::Pattern.Streaming">
            <datawriter_qos>
                <publication_name>
                    <name>VideoFrameWriter</name>
                </publication_name>
            </datawriter_qos>
            <datareader_qos>
                <subscription_name>
                    <name>VideoFrameReader</name>
                </subscription_name>
            </datareader_qos>
        </qos_profile>

        <!-- Camera Info Profile - For camera metadata -->
        <qos_profile name="CameraInfo" base_name="BuiltinQosLib::Generic.BestEffort">
            <datawriter_qos>
                <publication_name>
                    <name>CameraInfoWriter</name>
                </publication_name>
            </datawriter_qos>
            <datareader_qos>
                <subscription_name>
                    <name>CameraInfoReader</name>
                </subscription_name>
            </datareader_qos>
        </qos_profile>
    </qos_library>

</dds>
