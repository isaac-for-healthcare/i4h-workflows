--- a/source/isaaclab/isaaclab/envs/mdp/events.py.orig	2025-05-28 13:26:38.866657096 +0800
+++ b/source/isaaclab/isaaclab/envs/mdp/events.py	2025-05-28 13:31:29.282275674 +0800
@@ -1188,8 +1188,25 @@
             body_names_regex = ".*"
 
         # create the affected prim path
-        # TODO: Remove the hard-coded "/visuals" part.
-        prim_path = f"{asset.cfg.prim_path}/{body_names_regex}/visuals"
+        # Check if the pattern with '/visuals' yields results when matching `body_names_regex`.
+        # If not, fall back to a broader pattern without '/visuals'.
+        asset_main_prim_path = asset.cfg.prim_path
+        # Try the pattern with '/visuals' first for the generic case
+        pattern_with_visuals = f"{asset_main_prim_path}/{body_names_regex}/visuals"
+        # Use sim_utils to check if any prims currently match this pattern
+        matching_prims = sim_utils.find_matching_prim_paths(pattern_with_visuals)
+        if matching_prims:
+            # If matches are found, use the pattern with /visuals
+            prim_path = pattern_with_visuals
+        else:
+            # If no matches found, fall back to the broader pattern without /visuals
+            # This pattern (e.g., /World/envs/env_.*/Table/.*) should match visual prims
+            # whether they end in /visuals or have other structures.
+            prim_path = f"{asset_main_prim_path}/.*"
+            carb.log_info(
+                f"Pattern '{pattern_with_visuals}' found no prims. Falling back to '{prim_path}' for texture"
+                " randomization."
+            )
 
         # Create the omni-graph node for the randomization term
         def rep_texture_randomization():
@@ -1199,7 +1216,6 @@
                 rep.randomizer.texture(
                     textures=texture_paths, project_uvw=True, texture_rotate=rep.distribution.uniform(*texture_rotation)
                 )
-
             return prims_group.node
 
         # Register the event to the replicator
